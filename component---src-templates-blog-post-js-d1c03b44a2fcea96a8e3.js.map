{"version":3,"file":"component---src-templates-blog-post-js-d1c03b44a2fcea96a8e3.js","mappings":"8KA0FA,IA7EY,WAAO,IAAD,MACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAmBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAW,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,YACtCC,EAAM,UAAGN,EAAKG,KAAKC,oBAAb,aAAG,EAAwBE,OAEvC,OACE,uBAAMC,UAAU,OACd,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,iCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCb,MAAAA,OAAA,EAAAA,EAAQc,OACR,2BACC,yBACGX,EADH,kCAG6B,8BAASH,EAAOc,MAH7C,KAKA,yBACE,qBAAGC,KAAI,gCAAgCX,MAAAA,OAAA,EAAAA,EAAQY,WAAR,IACpCC,MAAO,CACNC,SAAS,SACTC,QAAQ,YACRC,MAAM,UACNC,UAAU,SAEZ,gBAAC,IAAD,CAAiBC,KAAMC,EAAAA,OAEzB,qBAAGR,KAAI,yBAAyBX,MAAAA,OAAA,EAAAA,EAAQoB,UAAR,IAC7BP,MAAO,CACNC,SAAS,SACTC,QAAQ,YACRE,UAAU,SAEZ,gBAAC,IAAD,CAAiBC,KAAMG,EAAAA,OAEzB,qBAAGV,KAAI,4BAA4BX,MAAAA,OAAA,EAAAA,EAAQsB,SAAR,IAChCT,MAAO,CACNC,SAAS,SACTC,QAAQ,YACRC,MAAM,OACNC,UAAU,SAEd,gBAAC,IAAD,CAAiBC,KAAMK,EAAAA,Y,kFCAjC,UA1EyB,SAAC,GAAwB,IAAD,IAArB7B,EAAqB,EAArBA,KAAM8B,EAAe,EAAfA,SAC1BC,EAAO/B,EAAKgC,eACZC,GAAY,UAAAjC,EAAKG,KAAKC,oBAAV,eAAwB8B,QAAxB,QACVC,EAAmBnC,EAAnBmC,SAAUC,EAASpC,EAAToC,KAElB,OACE,gBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,gBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxB7B,YAAa0B,EAAKM,YAAYhC,aAAe0B,EAAKO,UAEpD,2BACE/B,UAAU,YACVgC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYV,EAAKM,YAAYH,OAC1C,yBACGH,EAAKM,YAAYK,MACjB,UAAAX,EAAKM,mBAAL,eAAkBM,UACX,kCAEGZ,EAAKM,YAAYM,QAAQC,KAAI,SAAC1C,EAAQ2C,GACrC,OACE,wBAAMC,IAAK,SAAWD,GACnB3C,EAAO6C,UADV,IAGG7C,EAAO8C,SACPH,EAAQd,EAAKM,YAAYM,QAAQM,OAAS,EAAI,KAAY,UAM/E,2BACEC,wBAAyB,CAAEC,OAAQpB,EAAKqB,MACxCX,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAKlC,UAAU,iBACb,sBACEY,MAAO,CACLkC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVnC,QAAS,IAGX,0BACGc,GACC,gBAAC,EAAAsB,KAAD,CAAMC,GAAIvB,EAASwB,OAAOC,KAAMC,IAAI,QAApC,KACK1B,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAqB,KAAD,CAAMC,GAAItB,EAAKuB,OAAOC,KAAMC,IAAI,QAC7BzB,EAAKC,YAAYH,MADpB,Y","sources":["webpack://metafacture-blog/./src/components/bio.js","webpack://metafacture-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faTwitter, faMastodon } from '@fortawesome/free-brands-svg-icons'\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n          }\n          social {\n            mastodon\n            twitter\n            github\n          }\n          description\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const description = data.site.siteMetadata?.description\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div  className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/metafacture-logo.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Metafacture ant\"\n      />\n      {author?.name && (\n       <div>\n        <p>\n          {description}\n          {` `}\n          This blog is maintained by <strong>{author.name}</strong>.\n        </p>\n        <p>\n          <a href={`https://openbiblio.social/@${social?.mastodon || ``}`}\n             style={{\n              fontSize: `1.75em`,\n              padding: `0em 0.2em`,\n              color: `#3088d4`,\n              boxShadow: `none`,\n            }}>\n            <FontAwesomeIcon icon={faMastodon}/>\n          </a>\n          <a href={`https://twitter.com/${social?.twitter || ``}`}\n             style={{\n              fontSize: `1.75em`,\n              padding: `0em 0.2em`,\n              boxShadow: `none`,\n            }}>\n            <FontAwesomeIcon icon={faTwitter}/>\n          </a>\n          <a href={`https://www.github.com/${social?.github || ``}`}\n             style={{\n              fontSize: `1.75em`,\n              padding: `0em 0.2em`,\n              color: `#000`,\n              boxShadow: `none`,\n            }}>\n          <FontAwesomeIcon icon={faGithub}/>\n          </a>\n        </p>\n       </div>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>\n            {post.frontmatter.date}\n            {post.frontmatter?.authors && (\n                    <span>\n                      {` | `}\n                      {post.frontmatter.authors.map((author, index) => {\n                        return(\n                          <span key={\"author\" + index}>\n                            {author.firstname}\n                            {` `}\n                            {author.lastname}\n                            {index < post.frontmatter.authors.length - 1 ? ',\\u00A0' : ''}\n                          </span>\n                        )})}\n                    </span>)}\n          </p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        authors { \n          lastname\n          firstname\n         }\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","description","social","className","S","layout","formats","src","width","height","quality","alt","name","href","mastodon","style","fontSize","padding","color","boxShadow","icon","faMastodon","twitter","faTwitter","github","faGithub","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","authors","map","index","key","firstname","lastname","length","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","Link","to","fields","slug","rel"],"sourceRoot":""}